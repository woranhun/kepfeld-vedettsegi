import os

import cv2
import imutils
import numpy as np
# import qrReservedMask
from scipy import stats


class QR:
    

    img = None
    corners = []
        
    def main(self):
        QR_SIZE = 57
        ENABLE_MASKING = True
        qrMask21 = np.array([1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0])
        qrMask25 = np.array([1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1, 0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0, 1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0, 1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0, 1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0, 1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0, 1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
        qrMask57 = np.array([1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1, 0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0, 1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0, 1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0, 1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0, 1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0, 1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])


        image = cv2.imread('test2.jpg')
        blur = cv2.pyrMeanShiftFiltering(image, 11, 21)
        gray = cv2.cvtColor(blur, cv2.COLOR_BGR2GRAY)
        thresh = cv2.threshold(
            gray, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)[1]

        cnts = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        #cv2.imshow(" asd", thresh)
        cnts = cnts[0] if len(cnts) == 2 else cnts[1]

        minX = float("inf")
        maxX = 0
        maxY = 0
        minY = float("inf")

        for c in cnts:
            peri = cv2.arcLength(c, True)
            approx = cv2.approxPolyDP(c, 0.02 * peri, True)
            if len(approx) == 4:
                x, y, w, h = cv2.boundingRect(approx)

                if max(w, h)/min(w, h) < 1.05 and w>3:
                    minX = min(minX, x)
                    maxX = max(maxX, x+w)
                    maxY = max(maxY, y+h)
                    minY = min(minY, y)
                    cv2.rectangle(image, (x, y), (x+w, y+h), (36, 255, 12), 2)

        gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
        cv2.imshow("saf",image)
        thresh2 = cv2.threshold(
            gray, 127, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)[1]
        #cropped_image = thresh2[1+minX:maxX-1, 1+minY:maxY]
        cropped_image = thresh2[minX:maxX+1, minY:maxY+1]

        resized = cv2.resize(cropped_image, [QR_SIZE*9, QR_SIZE*9], interpolation=cv2.INTER_NEAREST)

        rawData = np.zeros((QR_SIZE, QR_SIZE))
        #resized = np.zeros((456, 456))
        mask = np.zeros((QR_SIZE, QR_SIZE))

        formatInfo = ""
        for i in range(0,5):
            j = 8
            yCrop = [j * 9 + 2, j * 9 + 6]
            xCrop = [i * 9 + 2, i * 9 + 6]
            node = resized[xCrop[0]:xCrop[1], yCrop[0]:yCrop[1]]
            if i == 2 or i == 4: 
                formatInfo+=str((1-(int(stats.mode(node, axis=None)[0] / 255))))
            else: formatInfo+=str(((int(stats.mode(node, axis=None)[0] / 255))))

        ecNumber = int(formatInfo[::2], 2)
        if(ecNumber == 3): print("EC Level: Low")
        if(ecNumber == 2): print("EC Level: Medium")
        if(ecNumber == 1): print("EC Level: Q")
        if(ecNumber == 0): print("EC Level: High")
        maskIndex = int(formatInfo[2::], 2)
        print("Mask pattern: ", maskIndex)


        masks = [lambda i,j : (i+j)%2 == 0, 
                lambda i,j : (i)%2 == 0,
                lambda i,j : (j)%3 == 0,
                lambda i,j : (i+j)%3 == 0,
                lambda i,j : (i // 2 + j // 3) % 2 == 0,
                lambda i,j : (i*j)%2 + (i*j)%3 == 0,
                lambda i,j : ((i*j)%2 + (i*j)%3)%2 == 0,
                lambda i,j : (((i * j) % 3) + ((i + j) % 2)) % 2 == 0]

        maskIndex = 7

        for i in range(0,QR_SIZE):
            for j in range(0,QR_SIZE):
                yCrop = [j * 9 + 2, j * 9 + 6]
                xCrop = [i * 9 + 2, i * 9 + 6]
                node = resized[xCrop[0]:xCrop[1], yCrop[0]:yCrop[1]]

                # See pixel centers
                #cv2.rectangle(resized, (xCrop[0], yCrop[0]), (xCrop[1], yCrop[1]), (int(stats.mode(node, axis=None)[0]),0,0), 1)
                cv2.rectangle(resized, (xCrop[0], yCrop[0]), (xCrop[1], yCrop[1]), (255,0,0), 1)

                if(ENABLE_MASKING):

                    if masks[maskIndex](i,j):
                        rawData[i][j] = (int(stats.mode(node, axis=None)[0] / 255))
                        mask[i][j] = 1
                    else:
                        rawData[i][j] = 1-(int(stats.mode(node, axis=None)[0] / 255))
                        mask[i][j] = 0

                else:
                    rawData[i][j] = 1 - (int(stats.mode(node, axis=None)[0] / 255))

        #cv2.imshow("res",resized)
        # a format data nincs rendesen maszkolva
        #print(rawData)
        if(ENABLE_MASKING):
            masked = np.array(rawData * 255).astype('uint8')
            maskedImg =  255 - cv2.cvtColor(masked, cv2.COLOR_GRAY2BGR)
            #cv2.imshow("Masked", maskedImg)
            cv2.imwrite("detected1.png", maskedImg)

            maskDebug = np.array(mask * 255).astype('uint8')
            maskImg =  255 - cv2.cvtColor(maskDebug, cv2.COLOR_GRAY2BGR)
            #cv2.imshow("Mask", maskImg)
            cv2.imwrite("mask.png", maskImg)
        else: 
            orig = np.array(rawData * 255).astype('uint8')
            origImg =  255 - cv2.cvtColor(orig, cv2.COLOR_GRAY2BGR)
            #cv2.imshow("Original", origImg)
            cv2.imwrite("readOriginal.png", origImg)

        #Timing pattern bezavarna ehelyett
        #np.delete(rawData, 6, 1)


        column = QR_SIZE-1
        row = QR_SIZE-1
        isGoingUp = True
        outData = []
        afterTiming = False

        for i in range(QR_SIZE*(QR_SIZE-1)):

            if(column == 6):
                column-=1
                afterTiming = True
            #print("col " + str(column) + " row " + str(row))

            if(qrMask57[column*QR_SIZE + row] == 0):
                outData.append(int(rawData[row][column]))

            if afterTiming:
                if column % 2 == 0:
                    if (isGoingUp == True):
                        row -= 1
                    else:
                        row += 1
                    column += 1
                else:
                    column -= 1
            else: 
                if column % 2 == 1:
                    if (isGoingUp == True):
                        row -= 1
                    else:
                        row += 1
                    column += 1
                else:
                    column -= 1

            #this wont work after timing pattern
            if(isGoingUp and row == -1 and column%2 == 0):
                column-=2
                row = 0
                isGoingUp = False

            if(not isGoingUp and row == QR_SIZE and column%2 == 0):
                column-=2
                row= QR_SIZE-1
                isGoingUp = True

            

            # cv2.line(dst, corners[2], corners[1], (255, 255, 0), 1)


        def rearrange_bits(arr):
            print("Total data length(bits): ",len(arr))
            blocks = [
                [],
                [],
                [],
                []
            ]
            for i in range(68):
                for k in range(4):
                    for j in range(8):
                        blocks[k].append(arr[(i * 4 + k) * 8 + j])
            for j in range(8):
                blocks[2].append(arr[2176 + j])
            for j in range(8):
                blocks[3].append(arr[2184 + j])
            
            for i in range(18):
                for k in range(4):
                    for j in range(8):
                        blocks[k].append(arr[2192 + (i * 4 + k) * 8 + j])

            out = b" "

            for j in range(4):
                dataOut = ""
                stringOut = ""
                #itt kell 0-tól menni és úgy megy az RS decode
                for i in range(0, len(blocks[j])):
                    
                    dataOut += str(blocks[j][i])
                    
                    if len(dataOut) == 8:
                        stringOut += chr(int(dataOut, 2))
                        dataOut = ""

                
                #print(outData[128::])
                s = list(stringOut)
                stringOut = "".join(s)
                original = stringOut.encode('iso-8859-1')
                #print("original: ", original)

                from reedsolo import RSCodec
                rsc = RSCodec(18)
                #decodedData = rsc.decode( bytearray(original))[0]
                decodedData = bytearray(original)
                dec = decodedData

                bytes_as_bits = ''.join(format(byte, '08b') for byte in dec)
                

                integer_map = map(int, bytes_as_bits)
                bytes_as_bits_lst = list(integer_map)

                dataOut = ""
                stringOut = ""
                if i != 0: 
                    for i in range(0, len(bytes_as_bits_lst)):
                        dataOut += str(bytes_as_bits_lst[i])
                        if len(dataOut) == 8:
                            stringOut += chr(int(dataOut, 2))
                            dataOut = ""

                    original = stringOut.encode('iso-8859-1')

                    out += original

                for i in range(0, len(bytes_as_bits_lst)):
                    dataOut += str(bytes_as_bits_lst[i])
                    if len(dataOut) == 8:
                        stringOut += chr(int(dataOut, 2))
                        dataOut = ""

                original = stringOut.encode('iso-8859-1')

                out += original

            
            return blocks[0] #+ blocks[1] + blocks[2] + blocks[3]
            #return blocks[0][:68*8] + blocks[1][:68*8] + blocks[2][:69*8] + blocks[3][:69*8]
            #return out

        outData  = rearrange_bits(outData)
        #print(outData)

        dataOut = ""
        stringOut = ""
        #itt kell 0-tól menni és úgy megy az RS decode
        for i in range(0, len(outData)):
            
            dataOut += str(outData[i])
            
            if len(dataOut) == 8:
                stringOut += chr(int(dataOut, 2))
                dataOut = ""

        #print(outData)
        #print(outData[128::])
        s = list(stringOut)
        stringOut = "".join(s)
        original = stringOut.encode('iso-8859-1')

        from reedsolo import RSCodec
        rsc = RSCodec(18)  # 10 ecc symbols
        #decodedData = rsc.decode( bytearray(original))[0]
        decodedData = bytearray(original)
        dec = decodedData

        bytes_as_bits = ''.join(format(byte, '08b') for byte in dec)
        

        integer_map = map(int, bytes_as_bits)
        bytes_as_bits_lst = list(integer_map)

        dataOut = ""
        stringOut = ""
        for i in range(20, len(bytes_as_bits_lst)):
            dataOut += str(bytes_as_bits_lst[i])
            if len(dataOut) == 8:
                stringOut += chr(int(dataOut, 2))
                dataOut = ""

        original = stringOut.encode('iso-8859-1')
                
        print("Data Length (bits): ", len(bytes_as_bits_lst))
        dataType = "".join([str(i) for i in bytes_as_bits_lst[0:4]])
        print("Data Type: " + dataType)

        bytesOut = "".join([str(i) for i in bytes_as_bits_lst[4:12]])
        numCharacters = int(bytesOut, 2)
        print("Number of characters : " + str(numCharacters))


        print(original)

        
   

        # cv2.imshow('Black white image', closing)
        cv2.imshow('Cropped', resized)

        cv2.waitKey(0)
        cv2.destroyAllWindows()


if __name__ == '__main__':

    



    qr = QR()
    qr.main()
